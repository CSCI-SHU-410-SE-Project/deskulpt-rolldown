---
source: crates/rolldown_testing/src/integration_test.rs
---
# Assets

## main.js

```js
import assert from "node:assert";

// HIDDEN [rolldown:runtime]
//#region foo.js
var foo_exports = __export({
	a: () => a,
	a1: () => a1,
	a2: () => a2,
	a3: () => a3,
	b: () => b,
	bar: () => bar,
	c: () => c,
	d: () => d,
	default: () => baz,
	destructuring: () => destructuring,
	e: () => e,
	foo: () => foo$1,
	g: () => g,
	index: () => index,
	k: () => k,
	x: () => x,
	y: () => y,
	z: () => z
});
function foo$1() {}
var a, b, c, d, e, g, x, y, z, k, bar, baz, a1, a2, index, a3, destructuring;
var init_foo = __esm({ "foo.js": (() => {
	;
	[b] = [];
	[c = 1] = [];
	;
	({e} = {});
	({f: g = 1} = {});
	({h: [x, {y}], i: {z}, j: {k} = { k: null }} = {
		h: [0, { y: null }],
		i: {}
	});
	bar = class {};
	baz = class {};
	if (globalVar) a1 = 1e3;
	switch (globalVar) {
		case true:
			a2 = "baz";
			break;
		default:
	}
	for (index = 0; index < 10; index++) a3 = 1e3;
	({destructuring} = { destructuring: "destructuring" });
}) });

//#endregion
//#region main.js
globalThis.globalVar = true;
const foo = (init_foo(), __toCommonJS(foo_exports));
assert.strictEqual(foo.a1, 1e3);
assert.strictEqual(foo.a2, "baz");
assert.strictEqual(foo.a3, 1e3);
assert.strictEqual(foo.destructuring, "destructuring");
assert.strictEqual(foo.index, 10);

//#endregion
//# sourceMappingURL=main.js.map
```

# Sourcemap Visualizer

```
- ../foo.js
(3:0) "export function " --> (52:0) "function "
(3:16) "foo() " --> (52:9) "foo$1() "
(3:22) "{ }\n" --> (52:17) "{}\n"
(0:14) "[" --> (56:1) "["
(0:15) "b] = " --> (56:2) "b] = "
(0:20) "[]" --> (56:7) "[]"
(0:22) ", " --> (56:9) ";\n"
(0:24) "[" --> (57:1) "["
(0:25) "c = " --> (57:2) "c = "
(0:29) "1] = " --> (57:6) "1] = "
(0:34) "[]" --> (57:11) "[]"
(0:36) ";\n" --> (57:13) ";\n"
(1:15) "e} = " --> (59:3) "e} = "
(1:20) "{}" --> (59:8) "{}"
(1:22) ", {" --> (59:10) ");\n"
(1:25) "f: " --> (60:3) "f: "
(1:28) "g = " --> (60:6) "g = "
(1:32) "1} = " --> (60:10) "1} = "
(1:37) "{}" --> (60:15) "{}"
(1:39) ";\n" --> (60:17) ");\n"
(2:12) "h: " --> (61:3) "h: "
(2:15) "[" --> (61:6) "["
(2:16) "x, { " --> (61:7) "x, {"
(2:21) "y }], " --> (61:11) "y}], "
(2:27) "i: " --> (61:16) "i: "
(2:30) "{ " --> (61:19) "{"
(2:32) "z }, " --> (61:20) "z}, "
(2:37) "j: { " --> (61:24) "j: {"
(2:42) "k } = " --> (61:28) "k} = "
(2:48) "{" --> (61:33) "{ "
(2:49) "k: " --> (61:35) "k: "
(2:52) "null}" --> (61:38) "null }"
(2:57) "} = " --> (61:44) "} = "
(2:61) "{" --> (61:48) "{\n"
(2:62) "h: " --> (62:2) "h: "
(2:65) "[" --> (62:5) "["
(2:66) "0, " --> (62:6) "0, "
(2:69) "{" --> (62:9) "{ "
(2:70) "y: " --> (62:11) "y: "
(2:73) "null}" --> (62:14) "null }"
(2:78) "]" --> (62:20) "]"
(2:79) ", " --> (62:21) ",\n"
(2:81) "i: " --> (63:2) "i: "
(2:84) "{}" --> (63:5) "{}"
(2:86) "}" --> (63:7) "\n"
(2:87) ";\n" --> (64:2) ");\n"
(4:13) "bar " --> (65:1) "bar = "
(4:0) "export class bar " --> (65:7) "class "
(4:17) "{ }\n" --> (65:13) "{};\n"
(5:21) "baz " --> (66:1) "baz = "
(5:0) "export default class baz " --> (66:7) "class "
(5:25) "{ }\n" --> (66:13) "{};\n"
(15:0) "if (" --> (67:0) "\tif ("
(15:4) "globalVar) {\n" --> (67:5) "globalVar) "
(16:6) "a1 = " --> (67:16) "a1 = "
(16:11) "1000;\n" --> (67:21) "1e3;\n"
(18:0) "switch (" --> (68:0) "\tswitch ("
(18:8) "globalVar) {\n" --> (68:9) "globalVar) "
(18:0) "switch (globalVar) {\n" --> (68:20) "{\n"
(19:2) "case " --> (69:2) "case "
(19:7) "true:\n" --> (69:7) "true:\n"
(20:8) "a2 = " --> (70:3) "a2 = "
(20:13) "'baz';\n" --> (70:8) "\"baz\";\n"
(21:4) "break;\n" --> (71:0) "\t\t\tbreak;\n"
(22:2) "default:\n" --> (72:2) "default:\n"
(24:0) "for (var " --> (74:0) "\tfor ("
(24:9) "index = " --> (74:6) "index = "
(24:17) "0; " --> (74:14) "0; "
(24:20) "index < " --> (74:17) "index < "
(24:28) "10; " --> (74:25) "10; "
(24:32) "index++) {\n" --> (74:29) "index++) "
(25:6) "a3 = " --> (74:38) "a3 = "
(25:11) "1000;\n" --> (74:43) "1e3;\n"
(28:6) "destructuring } = " --> (75:3) "destructuring} = "
(28:24) "{" --> (75:20) "{ "
(28:25) "destructuring: " --> (75:22) "destructuring: "
(28:40) "'destructuring'}" --> (75:37) "\"destructuring\" }"
(28:56) ";\n" --> (75:54) ");\n"
- ../main.js
(0:0) "globalThis." --> (80:0) "globalThis."
(0:11) "globalVar = " --> (80:11) "globalVar = "
(0:23) "true;\n" --> (80:23) "true;\n"
(1:0) "const " --> (81:0) "const "
(1:6) "foo = require('./foo')\n" --> (81:6) "foo = (init_foo(), __toCommonJS(foo_exports));\n"
(5:0) "assert." --> (82:0) "assert."
(5:7) "strictEqual(" --> (82:7) "strictEqual("
(5:19) "foo." --> (82:19) "foo."
(5:23) "a1, " --> (82:23) "a1, "
(5:27) "1000)" --> (82:27) "1e3)"
(5:32) ";\n" --> (82:31) ";\n"
(6:0) "assert." --> (83:0) "assert."
(6:7) "strictEqual(" --> (83:7) "strictEqual("
(6:19) "foo." --> (83:19) "foo."
(6:23) "a2, " --> (83:23) "a2, "
(6:27) "'baz')" --> (83:27) "\"baz\")"
(6:33) ";\n" --> (83:33) ";\n"
(7:0) "assert." --> (84:0) "assert."
(7:7) "strictEqual(" --> (84:7) "strictEqual("
(7:19) "foo." --> (84:19) "foo."
(7:23) "a3, " --> (84:23) "a3, "
(7:27) "1000)" --> (84:27) "1e3)"
(7:32) ";\n" --> (84:31) ";\n"
(8:0) "assert." --> (85:0) "assert."
(8:7) "strictEqual(" --> (85:7) "strictEqual("
(8:19) "foo." --> (85:19) "foo."
(8:23) "destructuring, " --> (85:23) "destructuring, "
(8:38) "'destructuring')" --> (85:38) "\"destructuring\")"
(8:54) ";\n" --> (85:54) ";\n"
(9:0) "assert." --> (86:0) "assert."
(9:7) "strictEqual(" --> (86:7) "strictEqual("
(9:19) "foo." --> (86:19) "foo."
(9:23) "index, " --> (86:23) "index, "
(9:30) "10)" --> (86:30) "10)"
(9:33) ";\n" --> (86:33) ";\n"
```
